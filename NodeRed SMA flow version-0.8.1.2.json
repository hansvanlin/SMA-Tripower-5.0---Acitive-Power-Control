[
    {
        "id": "2c746c2c4d6a988f",
        "type": "subflow",
        "name": "Price Limiter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 85,
                "y": 165,
                "wires": [
                    {
                        "id": "283d493252e3c182"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1335,
                "y": 300,
                "wires": [
                    {
                        "id": "48f7f36e4dd9cee3",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1335,
                "y": 435,
                "wires": [
                    {
                        "id": "2cc4f478b49fd701",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#00ff99",
        "inputLabels": [
            "Current Price Input"
        ],
        "outputLabels": [
            "Output 5 or 100% ",
            "Output PriceLimit"
        ],
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 745,
            "y": 435,
            "wires": [
                {
                    "id": "7c6ce3aff64c0250",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "283d493252e3c182",
        "type": "change",
        "z": "2c746c2c4d6a988f",
        "name": "CurrentPrice",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "CurrentPrice",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 165,
        "wires": [
            [
                "2cc4f478b49fd701"
            ]
        ]
    },
    {
        "id": "2cc4f478b49fd701",
        "type": "Comparator",
        "z": "2c746c2c4d6a988f",
        "name": "Comparator",
        "property": "payload",
        "math": "<=",
        "topic1": "CurrentPrice",
        "topic2": "PriceLimit",
        "x": 965,
        "y": 210,
        "wires": [
            [
                "48f7f36e4dd9cee3"
            ]
        ]
    },
    {
        "id": "8b4b56690ce36a28",
        "type": "inject",
        "z": "2c746c2c4d6a988f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "PriceLimit",
        "payloadType": "global",
        "x": 165,
        "y": 300,
        "wires": [
            [
                "e6dc37b5ef30adad"
            ]
        ]
    },
    {
        "id": "48f7f36e4dd9cee3",
        "type": "function",
        "z": "2c746c2c4d6a988f",
        "name": "Power Limit 0 or 100 %",
        "func": "var compare = msg.payload ;\n\nswitch(compare) {\n  case true:\n    var Limfactor = 5\n    break;\n  case false:\n    var Limfactor = 100\n    break;\n  default:\n    var Limfactor = 100\n}\n\n\n\nreturn [{ payload: Limfactor }];\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1205,
        "y": 210,
        "wires": [
            []
        ]
    },
    {
        "id": "fd1fe29694d89c4f",
        "type": "change",
        "z": "2c746c2c4d6a988f",
        "name": "Last",
        "rules": [
            {
                "t": "set",
                "p": "PriceLimit",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 385,
        "y": 375,
        "wires": [
            []
        ]
    },
    {
        "id": "e6dc37b5ef30adad",
        "type": "ui_slider",
        "z": "2c746c2c4d6a988f",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "4fb0db5cea9cd881",
        "order": 19,
        "width": 6,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "PriceLimit",
        "topicType": "str",
        "min": "-0.75",
        "max": "0.75",
        "step": "0.01",
        "className": "",
        "x": 350,
        "y": 300,
        "wires": [
            [
                "fd1fe29694d89c4f",
                "7c6ce3aff64c0250"
            ]
        ]
    },
    {
        "id": "3ca2abeb32ff156b",
        "type": "inject",
        "z": "2c746c2c4d6a988f",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "CurrentPrice",
        "payloadType": "global",
        "x": 190,
        "y": 45,
        "wires": [
            [
                "283d493252e3c182"
            ]
        ]
    },
    {
        "id": "7c6ce3aff64c0250",
        "type": "function",
        "z": "2c746c2c4d6a988f",
        "name": "Start value after deploy",
        "func": "var limit = global.get(\"PriceLimit\");\n\nreturn [{payload: limit}];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 565,
        "y": 300,
        "wires": [
            [
                "d94942fd6a2ff886"
            ]
        ]
    },
    {
        "id": "d94942fd6a2ff886",
        "type": "change",
        "z": "2c746c2c4d6a988f",
        "name": "PriceLimit",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "PriceLimit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 780,
        "y": 300,
        "wires": [
            [
                "2cc4f478b49fd701"
            ]
        ]
    },
    {
        "id": "f5fecfff114983f8",
        "type": "subflow",
        "name": "Stored Inverter Power",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 280,
                "y": 100,
                "wires": [
                    {
                        "id": "9771e4cc757767da"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#ffff00",
        "icon": "node-red/cog.svg",
        "status": {
            "x": 540,
            "y": 100,
            "wires": [
                {
                    "id": "f5fecfff114983f8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "9771e4cc757767da",
        "type": "function",
        "z": "f5fecfff114983f8",
        "name": "Store Inverter Power",
        "func": "global.set(\"InverterPower\",msg.payload) ;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d9179c71c5c1cbaf",
        "type": "function",
        "z": "f5fecfff114983f8",
        "name": "Read Stored Power from storage",
        "func": "var InvPwr = global.get(\"InverterPower\");\nmsg.payload = InvPwr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 340,
        "wires": [
            [
                "79c1f67fdc5babde"
            ]
        ]
    },
    {
        "id": "79c1f67fdc5babde",
        "type": "debug",
        "z": "f5fecfff114983f8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 340,
        "wires": []
    },
    {
        "id": "328d432decbb866f",
        "type": "inject",
        "z": "f5fecfff114983f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "InverterPower",
        "payload": "",
        "payloadType": "date",
        "x": 230,
        "y": 340,
        "wires": [
            [
                "d9179c71c5c1cbaf"
            ]
        ]
    },
    {
        "id": "19b7ceb0c4629980",
        "type": "subflow",
        "name": "Dynamic Power Control",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 220,
                "y": 380,
                "wires": [
                    {
                        "id": "8127015507ce0d9a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1160,
                "y": 280,
                "wires": [
                    {
                        "id": "fd3b433d55734d93",
                        "port": 0
                    },
                    {
                        "id": "e4c127cd42a339a4",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "module": "Dynamic Power Control",
            "type": "Switch",
            "desc": "switches flow and control"
        },
        "color": "#00ff99",
        "icon": "node-red-dashboard/ui_switch.png",
        "status": {
            "x": 600,
            "y": 200,
            "wires": [
                {
                    "id": "25b3035174dabefe",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "25b3035174dabefe",
        "type": "ui_switch",
        "z": "19b7ceb0c4629980",
        "name": "Dynamic Control",
        "label": "Dynamic Control",
        "tooltip": "",
        "group": "4fb0db5cea9cd881",
        "order": 14,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "state",
        "topicType": "str",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "8127015507ce0d9a",
                "e4c127cd42a339a4"
            ]
        ]
    },
    {
        "id": "e4c127cd42a339a4",
        "type": "function",
        "z": "19b7ceb0c4629980",
        "name": "reset after off",
        "func": "var state = context.get(\"state\") || \"off\";\nvar max = 100;\n\nif (state == \"off\") {\n    return [{ payload: max }];\n\n}\n\n\n//var max = 100;\n//return [{ payload:max}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "8127015507ce0d9a",
        "type": "function",
        "z": "19b7ceb0c4629980",
        "name": "Flow On/OFF",
        "func": "var state = context.get(\"state\") || \"off\";\n\n// Display initial state status\nif (state == \"on\") {\n    node.status({ fill: \"green\", shape: \"dot\", text: state });\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: state });\n}\n\nif (msg.topic == \"state\") {\n    context.set(\"state\", msg.payload);\n    state = msg.payload;\n    // update status\n    if (state == \"on\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: state });\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\", text: state });\n    }\n} else {\n    if (state == \"on\") {\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n//var max = 100;\n//return [{ payload:max}];",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "2af5928cccc9e187"
            ]
        ]
    },
    {
        "id": "2af5928cccc9e187",
        "type": "smooth",
        "z": "19b7ceb0c4629980",
        "name": "",
        "property": "payload",
        "action": "mean",
        "count": "8",
        "round": "1",
        "mult": "single",
        "reduce": false,
        "x": 800,
        "y": 380,
        "wires": [
            [
                "fd3b433d55734d93"
            ]
        ]
    },
    {
        "id": "fd3b433d55734d93",
        "type": "delay",
        "z": "19b7ceb0c4629980",
        "name": "",
        "pauseType": "rate",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "b9fe8f8b757e29ca",
        "type": "subflow",
        "name": "Power Limiter",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 100,
                "y": 220,
                "wires": [
                    {
                        "id": "50c3d9c2b51a5bf5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1105,
                "y": 220,
                "wires": [
                    {
                        "id": "b7ea51d1b21374af",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1105,
                "y": 280,
                "wires": [
                    {
                        "id": "af5541cf58d6f8c5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#00ff99",
        "inputLabels": [
            "Actual use input"
        ],
        "outputLabels": [
            "Output 0 - 100%",
            "Output in Watt"
        ],
        "icon": "node-red-dashboard/ui_slider.png"
    },
    {
        "id": "50c3d9c2b51a5bf5",
        "type": "function",
        "z": "b9fe8f8b757e29ca",
        "name": "Power limit factor",
        "func": "//var Marge = 400 ;\n//var Limfactor = (msg.payload + Marge) / 5000 ;\nvar factor = global.get(\"InverterPower\");\nvar Limfactor = (msg.payload) / factor ; // 5000;\nreturn [{ payload: Limfactor }];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 295,
        "y": 220,
        "wires": [
            [
                "9ddd8bf4a4dbe001"
            ]
        ]
    },
    {
        "id": "6c358d17ae1ca89f",
        "type": "function",
        "z": "b9fe8f8b757e29ca",
        "name": "* 100",
        "func": "var lim = msg.payload *100 ;\nvar limit = Math.ceil(lim) ; \nreturn [{payload: limit}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 220,
        "wires": [
            [
                "b7ea51d1b21374af"
            ]
        ]
    },
    {
        "id": "9ddd8bf4a4dbe001",
        "type": "function",
        "z": "b9fe8f8b757e29ca",
        "name": "abs",
        "func": "var abs = Math.abs(msg.payload);\n\nreturn [{ payload: abs }]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 455,
        "y": 220,
        "wires": [
            [
                "6c358d17ae1ca89f"
            ]
        ]
    },
    {
        "id": "b7ea51d1b21374af",
        "type": "function",
        "z": "b9fe8f8b757e29ca",
        "name": "range (min-max)",
        "func": "var min = 0 ;\nvar max = 100 ;\n\nvar limit = msg.payload ;\n\nif (limit > max) {\n    limit = max;\n} else if (limit < min) {\n    limit = min;\n} \n\n\nreturn[{payload:limit}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725,
        "y": 220,
        "wires": [
            [
                "af5541cf58d6f8c5"
            ]
        ]
    },
    {
        "id": "af5541cf58d6f8c5",
        "type": "function",
        "z": "b9fe8f8b757e29ca",
        "name": "limit W",
        "func": "var factor = global.get(\"InverterPower\") / 100 ;\nvar lim = msg.payload * factor ; //50; // factor for 5kW  inverter\nreturn [{ payload: lim }];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 915,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "dd1316db29b22497",
        "type": "subflow",
        "name": "Dynamic Price Control",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 380,
                "y": 360,
                "wires": [
                    {
                        "id": "856666c868f3dcdb"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 360,
                "wires": [
                    {
                        "id": "490936e81cadc111",
                        "port": 0
                    },
                    {
                        "id": "856666c868f3dcdb",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#00ff99",
        "icon": "node-red-dashboard/ui_switch.png",
        "status": {
            "x": 590,
            "y": 510,
            "wires": [
                {
                    "id": "05d644e27099e347",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "05d644e27099e347",
        "type": "ui_switch",
        "z": "dd1316db29b22497",
        "name": "Dynamic Price Control",
        "label": "Dynamic Price Control",
        "tooltip": "",
        "group": "4fb0db5cea9cd881",
        "order": 17,
        "width": 6,
        "height": 1,
        "passthru": false,
        "decouple": "false",
        "topic": "state",
        "topicType": "str",
        "style": "",
        "onvalue": "on",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "off",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 400,
        "y": 420,
        "wires": [
            [
                "856666c868f3dcdb",
                "490936e81cadc111"
            ]
        ]
    },
    {
        "id": "490936e81cadc111",
        "type": "function",
        "z": "dd1316db29b22497",
        "name": "reset after off",
        "func": "var state = context.get(\"state\") || \"off\";\nvar max = 100;\n\nif (state == \"off\") {\n    return [{ payload: max }];\n\n}\n\n\n//var max = 100;\n//return [{ payload:max}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "856666c868f3dcdb",
        "type": "function",
        "z": "dd1316db29b22497",
        "name": "Flow On/OFF",
        "func": "var state = context.get(\"state\") || \"off\";\n\n// Display initial state status\nif (state == \"on\") {\n    node.status({ fill: \"green\", shape: \"dot\", text: state });\n} else {\n    node.status({ fill: \"red\", shape: \"dot\", text: state });\n}\n\nif (msg.topic == \"state\") {\n    context.set(\"state\", msg.payload);\n    state = msg.payload;\n    // update status\n    if (state == \"on\") {\n        node.status({ fill: \"green\", shape: \"dot\", text: state });\n    } else {\n        node.status({ fill: \"red\", shape: \"dot\", text: state });\n    }\n} else {\n    if (state == \"on\") {\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\n//var max = 100;\n//return [{ payload:max}];",
        "libs": [],
        "x": 640,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "288387e3aa954b54",
        "type": "subflow",
        "name": "Prices",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 410,
                "y": 330,
                "wires": [
                    {
                        "id": "8cccc98ee72e3752"
                    },
                    {
                        "id": "6151a38fe594f49c"
                    },
                    {
                        "id": "57f6677ef61fe5a0"
                    },
                    {
                        "id": "aef57ef89a5ff4d0"
                    },
                    {
                        "id": "918659e1d79ae76d"
                    },
                    {
                        "id": "9784b4ab51c019c2"
                    },
                    {
                        "id": "1c01b5c225e25450"
                    },
                    {
                        "id": "984d39e1de4347d6"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 930,
                "y": 420,
                "wires": [
                    {
                        "id": "6151a38fe594f49c",
                        "port": 0
                    }
                ]
            },
            {
                "x": 920,
                "y": 480,
                "wires": [
                    {
                        "id": "57f6677ef61fe5a0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 910,
                "y": 540,
                "wires": [
                    {
                        "id": "aef57ef89a5ff4d0",
                        "port": 0
                    }
                ]
            },
            {
                "x": 910,
                "y": 600,
                "wires": [
                    {
                        "id": "918659e1d79ae76d",
                        "port": 0
                    }
                ]
            },
            {
                "x": 910,
                "y": 660,
                "wires": [
                    {
                        "id": "9784b4ab51c019c2",
                        "port": 0
                    }
                ]
            },
            {
                "x": 910,
                "y": 720,
                "wires": [
                    {
                        "id": "1c01b5c225e25450",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#00ff99",
        "inputLabels": [
            "Price input"
        ],
        "outputLabels": [
            "Current Price",
            "Next Hour",
            "+2h",
            "+3h",
            "+4h",
            "+5h"
        ],
        "icon": "font-awesome/fa-eur",
        "status": {
            "x": 980,
            "y": 360,
            "wires": [
                {
                    "id": "6151a38fe594f49c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "8cccc98ee72e3752",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "Current Hour",
        "func": "//msg.payload = {};\n\nconst d = new Date();\nlet hour = d.getHours();\n//let value = payload.average();\n\n//var msg = payload.Prices[hour].price;\nmsg.payload = msg.array[hour];\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 270,
        "wires": [
            [
                "984d39e1de4347d6"
            ]
        ]
    },
    {
        "id": "6151a38fe594f49c",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "Current Price",
        "func": "const d = new Date();\n\nvar hourOffset = 0\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 655,
        "y": 390,
        "wires": [
            [
                "984d39e1de4347d6",
                "ccc05583d99fc3b2"
            ]
        ]
    },
    {
        "id": "57f6677ef61fe5a0",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "Next Hour",
        "func": "const d = new Date();\n\nvar hourOffset = 1\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "aef57ef89a5ff4d0",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "+2",
        "func": "const d = new Date();\n\nvar hourOffset = 2\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "918659e1d79ae76d",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "+3",
        "func": "const d = new Date();\n\nvar hourOffset = 3\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "9784b4ab51c019c2",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "+4",
        "func": "const d = new Date();\n\nvar hourOffset = 4\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "1c01b5c225e25450",
        "type": "function",
        "z": "288387e3aa954b54",
        "name": "+5",
        "func": "const d = new Date();\n\nvar hourOffset = 5\nlet hour = d.getHours() + hourOffset;\n\nvar msg = msg.payload.Prices[hour].price;\nreturn [{payload: msg}];\n\n\n// https://energie.anwb.nl/actuele-tarieven",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 720,
        "wires": [
            []
        ]
    },
    {
        "id": "984d39e1de4347d6",
        "type": "debug",
        "z": "288387e3aa954b54",
        "name": "debug 61",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 825,
        "y": 330,
        "wires": []
    },
    {
        "id": "ccc05583d99fc3b2",
        "type": "change",
        "z": "288387e3aa954b54",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "CurrentPrice",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 435,
        "wires": [
            []
        ]
    },
    {
        "id": "a72dd879636a8a50",
        "type": "subflow",
        "name": "Energy zero",
        "info": "This subflow uses the energy zero API for retrieving the hourly energy prices from the API of https://www.energyzero.nl/ for either today or the next day. \nThese are the prices as they are used by the Dutch energy providers ANWB energie, Energie van Ons and others.\n\nIn order not to load the API too heavy a rate limiter of 1 query per 15 minutes has been added to the subflow.\n\nDo note that tomorrows prices can be queried after 15:00, so there is a delay built in the\nnode that handles that.\n\n# Configuration\n\nPrice information can be retrieved for either today or tomorrow (default). It\nis also possible set if the prices should be retrieved including (default) or excluding tax.\n\n# Input\n\nIt triggers when injecting a message into the node.\n\n# Output\n\nThe output is an object with the result and a status message stored into the `msg.payload`.\n\nMost important is the `msg.payload.result`, which contains the estimated production of the panels. E.g.:\n\n```\npayload: object\n  Prices: array[24]\n    [0 … 9]\n    [10 … 19]\n    [20 … 23]\n      20: object\n        price: 0.15\n        readingDate: \"2023-01-04T19:00:00Z\"\n      21: object\n      22: object\n      23: object\n  intervalType: 4\n  average: 0.12\n  fromDate: \"2023-01-03T23:00:00Z\"\n  tillDate: \"2023-01-04T22:59:59.999Z\"\n```\n\nThe `msg.payload.average` gives the average price.\n\n# Status\n\nIn order not to load the api too much a rate limit has been added to maximize\nqueries once per 15 minutes. The status message turns green when a query is\nallowed and red if it is not allowed.\n\nIf the delay is active (tomorrows prices can be queried after 15:00), the\nnode will show that and wait until 15:00 before passing the message.\n",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "6e481239f9be5ad2"
                    },
                    {
                        "id": "199fed7313decf41"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1120,
                "y": 80,
                "wires": [
                    {
                        "id": "803cd4923ceb804d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "type",
                "type": "str",
                "value": "tomorrow",
                "ui": {
                    "icon": "font-awesome/fa-calendar",
                    "label": {
                        "en-US": "Type"
                    },
                    "type": "select",
                    "opts": {
                        "opts": [
                            {
                                "l": {
                                    "en-US": "Today"
                                },
                                "v": "today"
                            },
                            {
                                "l": {
                                    "en-US": "Tomorrow"
                                },
                                "v": "tomorrow"
                            }
                        ]
                    }
                }
            },
            {
                "name": "inctax",
                "type": "bool",
                "value": "true",
                "ui": {
                    "icon": "font-awesome/fa-money",
                    "label": {
                        "en-US": "Inc. tax"
                    },
                    "type": "checkbox"
                }
            }
        ],
        "meta": {
            "module": "Energy zero",
            "version": "0.0.2",
            "author": "Dirk-Jan Faber <dfaber@victronenergy.com>",
            "desc": "Query the Energy Zero API",
            "keywords": "energy zero, anwb, victron",
            "license": "GPL-3.0"
        },
        "color": "#00bb00",
        "icon": "font-awesome/fa-sun-o",
        "status": {
            "x": 940,
            "y": 240,
            "wires": [
                {
                    "id": "199fed7313decf41",
                    "port": 0
                },
                {
                    "id": "ceab67006ab6718b",
                    "port": 0
                },
                {
                    "id": "fe09692be9fe9796",
                    "port": 0
                },
                {
                    "id": "96db0c6058f0a26c",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "06f03440673114a3",
        "type": "http request",
        "z": "a72dd879636a8a50",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "803cd4923ceb804d"
            ]
        ]
    },
    {
        "id": "8166a7f227f9e1b5",
        "type": "function",
        "z": "a72dd879636a8a50",
        "name": "create energyzero url",
        "func": "msg.url = 'https://api.energyzero.nl/v1/energyprices';\nvar offset = 0;\nmsg.delay = 0;\nvar start = new Date();\n\nif (env.get('type') == 'tomorrow') {\n    offset = 24;\n    const targetTime = new Date(start.getFullYear(), start.getMonth(), start.getDate(), 15, 0, 0);\n    msg.delay = targetTime.getTime() - start.getTime();\n}\n\nstart.setUTCHours(0 + offset, start.getTimezoneOffset(), 0, 0);\nmsg.url += '?fromDate=' + start.toISOString();\n\nvar end = new Date();\nend.setUTCHours(23 + offset, start.getTimezoneOffset()+59, 59, 999);\nmsg.url += '&tillDate=' + end.toISOString();\n\nmsg.url += '&interval=4&usageType=1'\n\nif (env.get('inctax')) {\n    msg.url += '&inclBtw=true'\n} else {\n    msg.url += '&inclBtw=false'\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 80,
        "wires": [
            [
                "cdce15694ded555f",
                "769f0d09dba2abbe"
            ]
        ]
    },
    {
        "id": "803cd4923ceb804d",
        "type": "json",
        "z": "a72dd879636a8a50",
        "name": "Convert to json",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 980,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6e481239f9be5ad2",
        "type": "delay",
        "z": "a72dd879636a8a50",
        "name": "1 msg/15 seconds",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "15",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "8166a7f227f9e1b5",
                "02000604fb5a2f10"
            ]
        ]
    },
    {
        "id": "02000604fb5a2f10",
        "type": "delay",
        "z": "a72dd879636a8a50",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 400,
        "y": 220,
        "wires": [
            [
                "ceab67006ab6718b"
            ]
        ]
    },
    {
        "id": "199fed7313decf41",
        "type": "change",
        "z": "a72dd879636a8a50",
        "name": "rate limit active",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"fill\": \"yellow\", \"text\": \"Rate limiter active\" }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "ceab67006ab6718b",
        "type": "change",
        "z": "a72dd879636a8a50",
        "name": "rate limit inactive",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"fill\": \"green\", \"text\": \"Ok\" }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 630,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "582ac3ed2bf5ac7e",
        "type": "inject",
        "z": "a72dd879636a8a50",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 410,
        "y": 260,
        "wires": [
            [
                "ceab67006ab6718b"
            ]
        ]
    },
    {
        "id": "cdce15694ded555f",
        "type": "delay",
        "z": "a72dd879636a8a50",
        "name": "Optional delay",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 640,
        "y": 80,
        "wires": [
            [
                "06f03440673114a3",
                "96db0c6058f0a26c"
            ]
        ]
    },
    {
        "id": "769f0d09dba2abbe",
        "type": "switch",
        "z": "a72dd879636a8a50",
        "name": "",
        "property": "delay",
        "propertyType": "msg",
        "rules": [
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 630,
        "y": 160,
        "wires": [
            [
                "fe09692be9fe9796"
            ]
        ]
    },
    {
        "id": "fe09692be9fe9796",
        "type": "change",
        "z": "a72dd879636a8a50",
        "name": "delay",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"fill\": \"yellow\", \"text\": \"Delaying until 15.00\" }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "96db0c6058f0a26c",
        "type": "change",
        "z": "a72dd879636a8a50",
        "name": "Ok",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{ \"fill\": \"green\", \"text\": \"Ok\" }",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 750,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2fd64e35ec029de8",
        "type": "tab",
        "label": "SMA Sunny Tripower 5.0",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ebe736424c99df60",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#ffefbf",
            "label": true
        },
        "nodes": [
            "01a0b4d2755ef6c1",
            "84d865a0c31f0223",
            "80bfb9c386d52247"
        ],
        "x": 14,
        "y": 14,
        "w": 572,
        "h": 132
    },
    {
        "id": "070bb4f7c28c437a",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "1eb8b25d6fe5f1b3",
            "df565a9a2458a25c",
            "640b85955a50acf8",
            "1f5641ee1f3574bc",
            "8535d7c48ab4882c",
            "8691ef1e3912e551",
            "261152a46d805d54",
            "9202ee6858a14bfd",
            "a040fcfd8f168f42",
            "3db5970c2f038a0b",
            "9331e95f9fefb917",
            "93dace3ba16e7a24",
            "eef088c999bd397e"
        ],
        "x": 14,
        "y": 1204,
        "w": 1112,
        "h": 367
    },
    {
        "id": "231ff49ef1d477a8",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "688f39ff4d6a9aec",
            "ba2fe1c94599da8e",
            "b1b8818555e35992",
            "1adac31acbf72c0b",
            "f6ddd72666eab1c2",
            "c0d7f19624df37ca",
            "57725aa30dac1630",
            "a0c3e4acc8de37af"
        ],
        "x": 799,
        "y": 949,
        "w": 987,
        "h": 242
    },
    {
        "id": "cc4ff9517809eaa0",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "aed75024747eca54",
            "29a3abe693ef078b",
            "0c8db32cf3fe8b2a",
            "f5b82462d192ce49",
            "88bc2257f93549b0",
            "d7b786ce5cadce28",
            "a19c92e07ae69f4f",
            "a1eb5cd1aea245ef",
            "c2bcbda4f9fe2c56",
            "f8bf03ded6438127",
            "da5724b4a5ec2de6",
            "4762990771897842",
            "fe8a94f7c01ae370"
        ],
        "x": 14,
        "y": 689,
        "w": 1117,
        "h": 247
    },
    {
        "id": "ec19b3b5bd23ee2b",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "395f5b896dd31c17",
            "11ed5f08d2b0420c",
            "ee331052844eebcf",
            "d20b505f5c74bac6",
            "9f9dbaa7b90b690f",
            "599537189d4e90d4",
            "f050d3d90e6c11f0",
            "0444513b2d48c694",
            "19355c9a405c2de8",
            "233e2cd8026197c5",
            "18c7c8c5c1966e6d",
            "0669decb503aaef7",
            "b46462f09993eb11",
            "b49abd551c375e86"
        ],
        "x": 13,
        "y": 353,
        "w": 1768,
        "h": 323
    },
    {
        "id": "0e9ccc3b5dad57d2",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "Reading the Inverter limitation register",
        "style": {
            "fill": "#e3f3d3",
            "label": true
        },
        "nodes": [
            "ac4ed4a12c05ec8b",
            "92a5a3f2695b5a3d",
            "4ef381d3a445d0bb",
            "fd515d593e3c177d",
            "7b4c47b1c1ac3fe4",
            "7c83e8521a71f9f0",
            "16d3b6405978a4af",
            "2234d9e213e93136"
        ],
        "x": 14,
        "y": 154,
        "w": 1032,
        "h": 187
    },
    {
        "id": "55455da467e49811",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "name": "",
        "style": {
            "fill": "#92d04f",
            "label": true
        },
        "nodes": [
            "21e8678a0647bc06"
        ],
        "x": 1609,
        "y": 19,
        "w": 212,
        "h": 82
    },
    {
        "id": "0669decb503aaef7",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "enable injects for testing offline",
        "style": {
            "fill": "#dbcbe7",
            "label": true
        },
        "nodes": [
            "2db0bfb2829055c7",
            "99a99a4bbb72a6aa",
            "05c125221d282d8e"
        ],
        "x": 514,
        "y": 379,
        "w": 252,
        "h": 172
    },
    {
        "id": "b46462f09993eb11",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "Input from other flow (dyn pwr ctr)",
        "style": {
            "fill": "#ffdf7f",
            "label": true
        },
        "nodes": [
            "366ee18e24cd3305",
            "a99a5b2d28888a72"
        ],
        "x": 39,
        "y": 544,
        "w": 232,
        "h": 82
    },
    {
        "id": "b49abd551c375e86",
        "type": "group",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "Solar input other flow (Optional)",
        "style": {
            "fill": "#ffdf7f",
            "label": true
        },
        "nodes": [
            "05addc909e21ca16",
            "bf06e8f9cb296f7f"
        ],
        "x": 39,
        "y": 424,
        "w": 232,
        "h": 82
    },
    {
        "id": "2234d9e213e93136",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 275,
        "wires": [
            [
                "7c83e8521a71f9f0"
            ]
        ]
    },
    {
        "id": "7c83e8521a71f9f0",
        "type": "modbus-getter",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "SMA Modbus (41255) Power",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "logIOActivities": false,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "41255",
        "quantity": "2",
        "server": "67aa8a7899544f4d",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 395,
        "y": 275,
        "wires": [
            [
                "92a5a3f2695b5a3d",
                "fd515d593e3c177d"
            ],
            []
        ]
    },
    {
        "id": "ac4ed4a12c05ec8b",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "group": "4fb0db5cea9cd881",
        "order": 6,
        "width": 4,
        "height": 1,
        "name": "Power limit %",
        "label": "SMA Power Limit",
        "format": "{{msg.payload}} %",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 940,
        "y": 240,
        "wires": []
    },
    {
        "id": "92a5a3f2695b5a3d",
        "type": "function",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "Power Limit",
        "func": "var limit = msg.payload[0] /100;\n\n\n\nreturn [{ payload: limit }]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 240,
        "wires": [
            [
                "ac4ed4a12c05ec8b",
                "7b4c47b1c1ac3fe4"
            ]
        ]
    },
    {
        "id": "688f39ff4d6a9aec",
        "type": "ui_slider",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "",
        "label": "",
        "tooltip": "",
        "group": "4fb0db5cea9cd881",
        "order": 10,
        "width": 4,
        "height": 1,
        "passthru": true,
        "outs": "end",
        "topic": "topic",
        "topicType": "msg",
        "min": "5",
        "max": "100",
        "step": "5",
        "className": "",
        "x": 1235,
        "y": 1050,
        "wires": [
            [
                "ba2fe1c94599da8e",
                "b1b8818555e35992"
            ]
        ]
    },
    {
        "id": "4ef381d3a445d0bb",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "group": "4fb0db5cea9cd881",
        "order": 7,
        "width": 2,
        "height": 1,
        "name": "W",
        "label": "",
        "format": "{{msg.payload}} W",
        "layout": "row-right",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 970,
        "y": 300,
        "wires": []
    },
    {
        "id": "fd515d593e3c177d",
        "type": "function",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "Power Limit % to W , sma 5kW",
        "func": "var factor = global.get(\"InverterPower\") /10000 ;\n\nvar pro = msg.payload[0] * factor ; // 0.5; // factor 0.5 for 5kW  inverter\n\n\n\nreturn [{ payload: pro }]",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 300,
        "wires": [
            [
                "4ef381d3a445d0bb",
                "ee331052844eebcf"
            ]
        ]
    },
    {
        "id": "ba2fe1c94599da8e",
        "type": "function",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "* 100",
        "func": "var lim = msg.payload *100;\nreturn [{payload: lim}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 1050,
        "wires": [
            [
                "57725aa30dac1630"
            ]
        ]
    },
    {
        "id": "b1b8818555e35992",
        "type": "function",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "% to Watt , sma 5kW",
        "func": "var factor = global.get(\"InverterPower\") / 100 ;\nvar lim = msg.payload * factor ; //50; // factor for 5kW  inverter\nreturn [{payload: lim}];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1425,
        "y": 1150,
        "wires": [
            [
                "1adac31acbf72c0b"
            ]
        ]
    },
    {
        "id": "1adac31acbf72c0b",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "group": "4fb0db5cea9cd881",
        "order": 11,
        "width": 2,
        "height": 1,
        "name": "set:",
        "label": "",
        "format": "{{msg.payload}} W",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#19e119",
        "x": 1635,
        "y": 1150,
        "wires": []
    },
    {
        "id": "16d3b6405978a4af",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "Read Modbus values",
        "info": "",
        "x": 400,
        "y": 240,
        "wires": []
    },
    {
        "id": "f6ddd72666eab1c2",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "Write Modbus Register",
        "info": "",
        "x": 1610,
        "y": 1010,
        "wires": []
    },
    {
        "id": "aed75024747eca54",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Dynamic Power Control ",
        "info": "",
        "x": 535,
        "y": 735,
        "wires": []
    },
    {
        "id": "a99a5b2d28888a72",
        "type": "link in",
        "z": "2fd64e35ec029de8",
        "g": "b46462f09993eb11",
        "name": "actual use in 1",
        "links": [
            "b792982110625bd6"
        ],
        "x": 230,
        "y": 585,
        "wires": [
            [
                "9f9dbaa7b90b690f",
                "fe8a94f7c01ae370"
            ]
        ]
    },
    {
        "id": "366ee18e24cd3305",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "b46462f09993eb11",
        "name": "actual use in",
        "info": "actual use in: Use your own payload",
        "x": 135,
        "y": 585,
        "wires": []
    },
    {
        "id": "395f5b896dd31c17",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "group": "4fb0db5cea9cd881",
        "order": 3,
        "width": 6,
        "height": 1,
        "name": "Actual",
        "label": "Actual Use",
        "format": "{{msg.payload}} W",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#0a95eb",
        "x": 1250,
        "y": 405,
        "wires": []
    },
    {
        "id": "29a3abe693ef078b",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "group": "4fb0db5cea9cd881",
        "order": 4,
        "width": 4,
        "height": 1,
        "name": "Dynamic Limit",
        "label": "Calc. Dynamic Limit",
        "format": "{{msg.payload}} %",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffcb13",
        "x": 925,
        "y": 850,
        "wires": []
    },
    {
        "id": "c0d7f19624df37ca",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "Manual Power Limit Slider",
        "info": "",
        "x": 1285,
        "y": 990,
        "wires": []
    },
    {
        "id": "a0c3e4acc8de37af",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "Daily reset to 100%",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "100",
        "payloadType": "num",
        "x": 945,
        "y": 1050,
        "wires": [
            [
                "688f39ff4d6a9aec"
            ]
        ]
    },
    {
        "id": "0c8db32cf3fe8b2a",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "group": "4fb0db5cea9cd881",
        "order": 5,
        "width": 2,
        "height": 1,
        "name": "W",
        "label": "",
        "format": "{{msg.payload}} W",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffcb13",
        "x": 895,
        "y": 890,
        "wires": []
    },
    {
        "id": "11ed5f08d2b0420c",
        "type": "ui_chart",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "",
        "group": "4fb0db5cea9cd881",
        "order": 1,
        "width": 6,
        "height": 5,
        "label": "SMA Tripower 5.0",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "0",
        "ymax": "",
        "removeOlder": "20",
        "removeOlderPoints": "",
        "removeOlderUnit": "60",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#21a1de",
            "#19e119",
            "#ffcb13",
            "#ff7d0f",
            "#98df8a",
            "#c3f05a",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1665,
        "y": 525,
        "wires": [
            []
        ]
    },
    {
        "id": "ee331052844eebcf",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "ec19b3b5bd23ee2b",
        "name": "Powerlimit",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "P-Limit",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 525,
        "wires": [
            [
                "11ed5f08d2b0420c"
            ]
        ]
    },
    {
        "id": "d20b505f5c74bac6",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "Actual Use",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Act. Use",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1265,
        "y": 585,
        "wires": [
            [
                "0444513b2d48c694"
            ]
        ]
    },
    {
        "id": "9f9dbaa7b90b690f",
        "type": "function",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "Actual use",
        "func": "\nvar Actual = msg.payload ;\nreturn [{ payload: Actual }];",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1065,
        "y": 585,
        "wires": [
            [
                "d20b505f5c74bac6",
                "395f5b896dd31c17"
            ]
        ]
    },
    {
        "id": "f5b82462d192ce49",
        "type": "ui_numeric",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "marge",
        "label": "Marge",
        "tooltip": "",
        "group": "4fb0db5cea9cd881",
        "order": 12,
        "width": 4,
        "height": 1,
        "wrap": false,
        "passthru": true,
        "topic": "Marge",
        "topicType": "msg",
        "format": "{{value}} W",
        "min": 0,
        "max": "1000",
        "step": "50",
        "className": "",
        "x": 270,
        "y": 855,
        "wires": [
            [
                "88bc2257f93549b0",
                "a1eb5cd1aea245ef"
            ]
        ]
    },
    {
        "id": "88bc2257f93549b0",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Marge",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Marge",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 855,
        "wires": [
            [
                "d7b786ce5cadce28"
            ]
        ]
    },
    {
        "id": "d7b786ce5cadce28",
        "type": "SumUltimate",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "actual",
        "property": "payload",
        "math": "sum",
        "x": 535,
        "y": 830,
        "wires": [
            [
                "c2bcbda4f9fe2c56"
            ]
        ]
    },
    {
        "id": "a19c92e07ae69f4f",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Last Used",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "00 00 * * *",
        "once": true,
        "onceDelay": "0.3",
        "topic": "",
        "payload": "last",
        "payloadType": "flow",
        "x": 130,
        "y": 855,
        "wires": [
            [
                "f5b82462d192ce49"
            ]
        ]
    },
    {
        "id": "599537189d4e90d4",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "ec19b3b5bd23ee2b",
        "name": "Calc. Limit",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Calc. Lim.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1270,
        "y": 635,
        "wires": [
            [
                "19355c9a405c2de8"
            ]
        ]
    },
    {
        "id": "a1eb5cd1aea245ef",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "last",
        "rules": [
            {
                "t": "set",
                "p": "last",
                "pt": "flow",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 895,
        "wires": [
            []
        ]
    },
    {
        "id": "05addc909e21ca16",
        "type": "link in",
        "z": "2fd64e35ec029de8",
        "g": "b49abd551c375e86",
        "name": "AC solar pwr",
        "links": [
            "b07ce420a9bbb0b2"
        ],
        "x": 230,
        "y": 465,
        "wires": [
            [
                "f050d3d90e6c11f0"
            ]
        ]
    },
    {
        "id": "bf06e8f9cb296f7f",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "b49abd551c375e86",
        "name": "Solar power in",
        "info": "",
        "x": 135,
        "y": 465,
        "wires": []
    },
    {
        "id": "f050d3d90e6c11f0",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "Ac power",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Solar Pwr",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1260,
        "y": 465,
        "wires": [
            [
                "233e2cd8026197c5",
                "18c7c8c5c1966e6d"
            ]
        ]
    },
    {
        "id": "0444513b2d48c694",
        "type": "delay",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "",
        "pauseType": "rate",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 585,
        "wires": [
            [
                "11ed5f08d2b0420c"
            ]
        ]
    },
    {
        "id": "19355c9a405c2de8",
        "type": "delay",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "ec19b3b5bd23ee2b",
        "name": "",
        "pauseType": "rate",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "3",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1440,
        "y": 635,
        "wires": [
            [
                "11ed5f08d2b0420c"
            ]
        ]
    },
    {
        "id": "233e2cd8026197c5",
        "type": "delay",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "name": "",
        "pauseType": "rate",
        "timeout": "6",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1430,
        "y": 465,
        "wires": [
            [
                "11ed5f08d2b0420c"
            ]
        ]
    },
    {
        "id": "1eb8b25d6fe5f1b3",
        "type": "subflow:a72dd879636a8a50",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "ANWB ",
        "env": [
            {
                "name": "type",
                "value": "today",
                "type": "str"
            }
        ],
        "x": 325,
        "y": 1425,
        "wires": [
            [
                "9202ee6858a14bfd"
            ]
        ]
    },
    {
        "id": "df565a9a2458a25c",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "array",
                "v": "[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\",\"19\",\"20\",\"21\",\"22\",\"23\"]",
                "vt": "json"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1425,
        "wires": [
            [
                "1eb8b25d6fe5f1b3"
            ]
        ]
    },
    {
        "id": "640b85955a50acf8",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "Dynamic Price Control",
        "info": "",
        "x": 520,
        "y": 1275,
        "wires": []
    },
    {
        "id": "1f5641ee1f3574bc",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "group": "4fb0db5cea9cd881",
        "order": 20,
        "width": 6,
        "height": 1,
        "name": "Current Price",
        "label": "Current Price",
        "format": "{{msg.payload}} euro",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 685,
        "y": 1395,
        "wires": []
    },
    {
        "id": "8535d7c48ab4882c",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "group": "4fb0db5cea9cd881",
        "order": 21,
        "width": 6,
        "height": 1,
        "name": "Next hour",
        "label": "Next hour",
        "format": "{{msg.payload}} euro",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 680,
        "y": 1440,
        "wires": []
    },
    {
        "id": "8691ef1e3912e551",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "group": "4fb0db5cea9cd881",
        "order": 22,
        "width": 6,
        "height": 1,
        "name": "Price +2h",
        "label": "Price: +2h",
        "format": "{{msg.payload}} euro",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 680,
        "y": 1485,
        "wires": []
    },
    {
        "id": "261152a46d805d54",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "070bb4f7c28c437a",
        "group": "4fb0db5cea9cd881",
        "order": 23,
        "width": 6,
        "height": 1,
        "name": "Price +3h",
        "label": "Price +3h",
        "format": "{{msg.payload}} euro",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#ffffff",
        "x": 680,
        "y": 1530,
        "wires": []
    },
    {
        "id": "9202ee6858a14bfd",
        "type": "subflow:288387e3aa954b54",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "",
        "x": 450,
        "y": 1425,
        "wires": [
            [
                "1f5641ee1f3574bc",
                "eef088c999bd397e"
            ],
            [
                "8535d7c48ab4882c"
            ],
            [
                "8691ef1e3912e551"
            ],
            [
                "261152a46d805d54"
            ],
            [],
            []
        ]
    },
    {
        "id": "a040fcfd8f168f42",
        "type": "subflow:dd1316db29b22497",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "",
        "x": 960,
        "y": 1300,
        "wires": [
            [
                "9331e95f9fefb917"
            ]
        ]
    },
    {
        "id": "c2bcbda4f9fe2c56",
        "type": "subflow:b9fe8f8b757e29ca",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "",
        "x": 705,
        "y": 830,
        "wires": [
            [
                "29a3abe693ef078b",
                "da5724b4a5ec2de6",
                "f8bf03ded6438127"
            ],
            [
                "0c8db32cf3fe8b2a",
                "599537189d4e90d4"
            ]
        ]
    },
    {
        "id": "05c125221d282d8e",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "0669decb503aaef7",
        "name": "test actual use in",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "3333",
        "payloadType": "num",
        "x": 650,
        "y": 510,
        "wires": [
            [
                "9f9dbaa7b90b690f",
                "fe8a94f7c01ae370"
            ]
        ],
        "icon": "font-awesome/fa-wrench"
    },
    {
        "id": "f8bf03ded6438127",
        "type": "subflow:19b7ceb0c4629980",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "",
        "x": 955,
        "y": 790,
        "wires": [
            [
                "4762990771897842"
            ]
        ]
    },
    {
        "id": "2db0bfb2829055c7",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "d": true,
        "g": "0669decb503aaef7",
        "name": "test solar in",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "4589",
        "payloadType": "num",
        "x": 640,
        "y": 420,
        "wires": [
            [
                "f050d3d90e6c11f0"
            ]
        ],
        "icon": "font-awesome/fa-wrench"
    },
    {
        "id": "99a99a4bbb72a6aa",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "0669decb503aaef7",
        "name": "TESTING VALUES",
        "info": "",
        "x": 635,
        "y": 465,
        "wires": []
    },
    {
        "id": "01a0b4d2755ef6c1",
        "type": "inject",
        "z": "2fd64e35ec029de8",
        "g": "ebe736424c99df60",
        "name": "Set Inverter Power Here (Watt)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "5000",
        "payloadType": "num",
        "x": 190,
        "y": 105,
        "wires": [
            [
                "84d865a0c31f0223"
            ]
        ],
        "icon": "node-red/cog.svg"
    },
    {
        "id": "84d865a0c31f0223",
        "type": "subflow:f5fecfff114983f8",
        "z": "2fd64e35ec029de8",
        "g": "ebe736424c99df60",
        "name": "",
        "x": 460,
        "y": 105,
        "wires": []
    },
    {
        "id": "80bfb9c386d52247",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "ebe736424c99df60",
        "name": "CONFIGURE: INVERTER POWER",
        "info": "",
        "x": 180,
        "y": 55,
        "wires": []
    },
    {
        "id": "18c7c8c5c1966e6d",
        "type": "ui_text",
        "z": "2fd64e35ec029de8",
        "g": "ec19b3b5bd23ee2b",
        "group": "4fb0db5cea9cd881",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Solar Power",
        "format": "{{msg.payload}} W",
        "layout": "row-spread",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "12",
        "color": "#19e119",
        "x": 1430,
        "y": 405,
        "wires": []
    },
    {
        "id": "3db5970c2f038a0b",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "Status",
        "property": "payload",
        "x": 795,
        "y": 1340,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "da5724b4a5ec2de6",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Status",
        "property": "payload",
        "x": 830,
        "y": 730,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "9331e95f9fefb917",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "Status",
        "property": "payload",
        "x": 1085,
        "y": 1300,
        "wires": [
            [
                "688f39ff4d6a9aec"
            ]
        ],
        "l": false
    },
    {
        "id": "4762990771897842",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Status",
        "property": "payload",
        "x": 1090,
        "y": 790,
        "wires": [
            [
                "688f39ff4d6a9aec"
            ]
        ],
        "l": false
    },
    {
        "id": "7b4c47b1c1ac3fe4",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "0e9ccc3b5dad57d2",
        "name": "Status",
        "property": "payload",
        "x": 825,
        "y": 195,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "57725aa30dac1630",
        "type": "modbus-write",
        "z": "2fd64e35ec029de8",
        "g": "231ff49ef1d477a8",
        "name": "SMA Modbus Write 40023 ( Limit )",
        "showStatusActivities": false,
        "showErrors": false,
        "showWarnings": true,
        "unitid": "3",
        "dataType": "HoldingRegister",
        "adr": "40023",
        "quantity": "1",
        "server": "67aa8a7899544f4d",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "delayOnStart": false,
        "startDelayTime": "",
        "x": 1620,
        "y": 1050,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "21e8678a0647bc06",
        "type": "comment",
        "z": "2fd64e35ec029de8",
        "g": "55455da467e49811",
        "name": "Version 0.8.2.1",
        "info": "Cleaned up\nadded some status indicators\ngroup by function",
        "x": 1715,
        "y": 60,
        "wires": []
    },
    {
        "id": "fe8a94f7c01ae370",
        "type": "change",
        "z": "2fd64e35ec029de8",
        "g": "cc4ff9517809eaa0",
        "name": "Actual Use",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "Act. Use",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 395,
        "y": 795,
        "wires": [
            [
                "d7b786ce5cadce28"
            ]
        ]
    },
    {
        "id": "93dace3ba16e7a24",
        "type": "StatusUltimate",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "Status",
        "property": "payload",
        "x": 785,
        "y": 1245,
        "wires": [
            []
        ],
        "l": false
    },
    {
        "id": "eef088c999bd397e",
        "type": "subflow:2c746c2c4d6a988f",
        "z": "2fd64e35ec029de8",
        "g": "070bb4f7c28c437a",
        "name": "",
        "x": 650,
        "y": 1320,
        "wires": [
            [
                "a040fcfd8f168f42",
                "93dace3ba16e7a24"
            ],
            [
                "3db5970c2f038a0b"
            ]
        ]
    },
    {
        "id": "bb0d234c8a50aa7d",
        "type": "ui_spacer",
        "z": "2fd64e35ec029de8",
        "name": "spacer",
        "group": "",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "dbeb651ec90a2e5c",
        "type": "ui_spacer",
        "z": "2fd64e35ec029de8",
        "name": "spacer",
        "group": "4fb0db5cea9cd881",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "b1568cb3c5a1f43f",
        "type": "ui_spacer",
        "z": "2fd64e35ec029de8",
        "name": "spacer",
        "group": "4fb0db5cea9cd881",
        "order": 15,
        "width": 6,
        "height": 1
    },
    {
        "id": "67aa8a7899544f4d",
        "type": "modbus-client",
        "name": "SMA Modbus",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.178.4",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 3,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "4fb0db5cea9cd881",
        "type": "ui_group",
        "name": "SMA  settings",
        "tab": "cccf47e4.857ec8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": true,
        "className": ""
    },
    {
        "id": "cccf47e4.857ec8",
        "type": "ui_tab",
        "name": "Energy",
        "icon": "battery_charging_60",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]